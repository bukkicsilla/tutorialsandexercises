<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <!--<link rel='stylesheet' href='/stylesheets/prism_tomorrownight.css' />
    <script src="/javascripts/prism_tomorrownight.js"></script>-->
  </head>
  <body class="crud">
      
      <div class="step0">
          
    <h2 class="tuttitle"><%= title %></h2>
          
      </div>
        <div class="step0">
      <ol>
        <li class="inside"><a href="#S1"> Starting a new project with Express </a> </li>
          <li class="inside"> <a href="#S2"> List of parts and one static part  </a></li>
          <li class="inside"> <a href="#S3"> Data in controller </a></li>
          <li class="inside"> <a href="#S4"> MongoDB and Schema </a></li>
          <li class="inside"> <a href="#S5"> Reading documents in Postman </a></li>
          <li class="inside"> <a href="#S6"> Seeing documents in the Browser </a></li>
          <li class="inside"> <a href="#S7"> Creating documents</a></li>
          <li class="inside"> <a href="#S8"> Deleting documents </a></li>
          <li class="inside"> <a href="#S9"> Updating single subdocuments </a></li>
          <li class="inside"> <a href="#S10"> Updating list subdocuments </a></li>
      </ol>
      </div>
      <div class="steps">
      <a href="https://brainparts.herokuapp.com/" target="_blank"> --> Demo of the application </a>
      </div>
    <div id="S1" class='steps'>
        <h3 class="num"> 1. Starting a new project with Express </h3>
To start let's do a few initial steps. First we make a new directory 'brain' and go into this dirrectory. There we create a new express project and we are going to use ejs to template. We also need to install Node dependencies with npm. Within your project directory you can find a file called package.json which shows the dependencies. You can open the project in any editor you like.
       
           <pre><code>
        $ mkdir brain
        $ cd brain
        $ express --ejs
        $ npm install 
         </code></pre>
        
        Now we can start the project. In the project directory we use npm start or nodemon. Nodemon has the advantage that if the code has been changed, the application restarts automatically. You only have to refresh your browser. To install nodemon globally we have to use npm in terminal. After the first initial steps let's check the project in the browser: go to localhost:3000.
        
        <pre><code>
        $ npm install -g nodemon
        </code></pre>
        
        We are going to change the title from 'Express' to 'Parts of the Human Brain' in the routes/index.js file. After that we comment out the welcome line in views/index.ejs file. Now you can check your browser again. 
        
        <pre><code class="language-javascript">
        res.render('index', { title: 'Parts of the Human Brain' });
        </code></pre>
        
        <pre><code class="language-markup">
        &lt;&#33;--&lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;--&gt;
        </code></pre>
        
        We have directories like routes and views, and now we create a new folder called controllers in brain folder.
        <pre><code>
        $ mkdir controllers
        </code></pre>
        In that new directory let's open a new file brain.js and define a function getParts in brain.js. We don't need the router.get function in router/index.js so we comment it out. Instead we define a new router.get function which uses the function getParts defined in brain.js. In order to use this function it should be imported, so we define a new variable called brainController after the definition of var router, which imports the whole content of the brain.js file.  
        <pre><code class="language-javascript">
        module.exports.getParts = function(req, res){
          res.render('index', {title: 'Parts of the Human Brain'});
        };
        </code></pre>
        <pre><code class="language-javascript">
        router.get('/', brainController.getParts);
        </code></pre>
        <pre><code class="language-javascript">
        var brainController = require('../controllers/brain');
        </code></pre>
        
        Checking the browser, we don't see any change from last time. Finally we can save our project and subsequent verions of it in git repository. I don't go into details how to do that. One good tutorials is <a href="http://www.vogella.com/tutorials/Git/article.html" target="_blank" > here </a>. In this project we need to create a .gitignore file which contains the followings:
        
        <pre><code>
        # Dependency directory
        node_modules

        # Environment variables
        .env
        </code></pre>
        After cloning the repository you can checkout this part. 
        
        <pre><code>
   $ git clone https://github.com/bukkicsilla/brainparts.git;
   $ cd brainparts
   $ git checkout step1
   $ npm install
        </code></pre>
        </div>
      
     
      
    <div id="S2" class='steps'>
     <h3 class="num"> 2. List of parts and one static part </h3> In views/index.ejs first we creat our list with only 3 parts of the brain. Let's put this list after the line with the title. Later we can add more of the parts of the brain in form using mongodb database. 
           <pre><code class="language-markup">
        &lt;ul&gt;
           &lt;li&gt;Cerebrum&lt;/li&gt;
           &lt;li&gt;Cerebellum&lt;/li&gt;
           &lt;li&gt;Pons&lt;/li&gt;
        &lt;/ul&gt;
       </code></pre>
        
        Some styling is needed for better readability. In public/stylesheets/style.css we add: 
        
  <pre><code class="language-css">
        li, p {
            font-size: 18px;
        }
        
</code></pre>
        Now we would like to see some of the details of one brain area. The first part is the Cerebrum in the list, so we use that and we need a new part.ejs page for that. But before that let's define a function getPart in controllers/brain.js. The 'part' means the part.ejs file we will create soon.
        
        <pre><code class="language-javascript">
        module.exports.getPart = function(req, res){
           res.render('part', {title: 'Part of the brain.'});
        };
        </code></pre>

        To show the details, a route method has to be set up in routes/index.js, which uses the function getPart.
        <pre><code class="language-javascript">
        router.get('/part', brainController.getPart);
        </code></pre>
        
        Now let's create the part.ejs file in views and populate it with the following code:
        <pre><code class="language-markup">
    &lt;!DOCTYPE html&gt;
      &lt;html&gt;
        &lt;head&gt;
          &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;
          &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;
          &lt;p&gt; Cerebrum &lt;/p&gt;
          &lt;p&gt; It means brain.&lt;/p&gt;
          &lt;p&gt; Functionality:&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Reasoning&lt;/li&gt;
            &lt;li&gt;Recognition&lt;/li&gt;
            &lt;li&gt;Visual processing&lt;/li&gt;
            &lt;li&gt;Speech&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/body&gt;
      &lt;/html&gt;
     </code></pre>
     
      To reach this page from the index page, we modify one line in views/index.ejs.  Instead of &lt;li&gt;Cerebrum&lt;/li&gt; we put:

      <pre><code class="language-markup">
        &lt;li&gt;&lt;a href="/part"&gt;Cerebrum&lt;/a&gt;&lt;/li&gt;
        </code></pre>
        
        Let's check our project in the browser again. You can get the code by cheching out step2. The f flag makes sure that any changes will be undone. 
        <pre><code>
    $ git checkout -f step2
        </code></pre>
      </div>
      
<div id="S3" class='steps'>
     <h3 class="num"> 3. Data in controller </h3> In this section we move the data to the controller file.  Replace the two existing functions in controllers/brain.js with the following code:
       
           <pre><code class="language-javascript">
    module.exports.getParts = function(req, res){
      res.render('index', {
        title: 'Parts of the Human Brain',
        parts: [{
                name: 'Cerebrum'
                },
                {
                name: 'Cerebellum'
                },
                {
                name: 'Pons'
                }
               ]                   
            });
    };

        </code></pre>
        
      <pre><code>
    module.exports.getPart = function(req, res){
      res.render('part', {
        title: 'Part of the brain.',
        part: { 
              name: 'Cerebrum',
              meaning: 'brain',
              functionalities: [
                'Reasoning', 'Recognition', 
                'Visual Processing', 'Speech'
                ]
              }
         });
    };

      </code></pre>
    Now we don't need the data in the views anymore. First delete your list in views/index.ejs, and instead of it put a for loop which is used to iterate over the list using &lt;% code %&gt;. The variable value is passed from the controller to the view with &lt;%= value %&gt;.   
    
    <pre><code>
    &lt;ul&gt;
      &lt;% parts.forEach(function(part){ %&gt;
      &lt;li&gt; &lt;a href="/part"&gt;&lt;%= part.name %&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;% }); %&gt;
    &lt;/ul&gt;
     </code></pre>

    Next delete the two first paragraphs in views/part.ejs and instead of them put these lines.
    
    <pre><code>
    &lt;p&gt;&lt;%= part.name %&gt; &lt;/p&gt;
    &lt;p&gt; It means &lt;%= part.meaning%&gt;.&lt;/p&gt;
     </code></pre>
    
    Finally delete your list in views/part.ejs and replace it with this code:
    <pre><code>
    &lt;ul&gt;
     &lt;% for(var i=0; i&lt;part.functionalities.length; i++) {%&gt;
       &lt;li&gt;
         &lt;span&gt;&lt;%= part.functionalities[i] %&gt;&lt;/span&gt;
       &lt;/li&gt;
     &lt;% } %&gt;
    &lt;/ul&gt;
   </code></pre>
    
    After completing this section we are ready to check our project in the browser. You can get the code now by checking out step3:
    <pre><code>
    $ git checkout -f step3
    </code></pre>
      </div>
      
      <div id="S4" class='steps'>
     <h3 class="num"> 4. MongoDB and Schema </h3> First let's create a color id between the span tag in views/part.ejs and
          
    <pre><code>
    &lt;span id="color"&gt;&lt;%= part.functionalities[i] %&gt;&lt;/span&gt;
    </code></pre>
        we define the color in public/stylesheets/style.css. Add this code to the end of the file.
          <pre><code>
    #color {
           color: blueviolet;
           }
      </code></pre> 
      Now we set up our database by creating a new folder and by installing Moongose the bridge between MongoDB and Express. 
          So create a folder called 'models' in the root folder and type the following in the consol.
          <pre><code>
    $ npm install mongoose --save
      </code></pre>
    In the models folder let's create a new file brainparts.js. The first line gets the Mongoose which we need for the Moongose schema. 
    Next we define the schema 'partSchema' with a subdocument 'functionalitySchema'. Notice that the first requires the second. Last the model is compiled from the schema. 'Brainpart' is the name of the model and 'partSchema' is the schema to use. Because there is no MongoDB collection name given as an argument (it would be the third one), it will be automatically created from the model name as the lowercase pluralized version: 'brainparts'.  
    
    <pre><code>
     var mongoose = require('mongoose');
    
     var partSchema = new mongoose.Schema({
     name: { type: String, unique: true, required: true},
     meaning: {type: String},
     functionalities: [functionalitySchema]
     });
    
     var functionalitySchema = new mongoose.Schema({
     functionality: {type: String}
     });
    
     mongoose.model('Brainpart', partSchema);
    
   </code></pre>

      Now let's open a new file called braindb.js in the models folder. Moongose is reqiered here too. <br/> In this tutorial we will use the database in the cloud. Specifically we create our database in mLab. If you don't have an account, please sign up. Let's create a database called 'brainmlab' at MongoDb Deployments. (I chose Amazon and the free Sandbox and US East.) Now you should add a user at Users: Add database user. <br/> You should replace the dbURI with your own path to the database. You can find the path at: <br/> 'To connect using a driver via the standard MongoDB URI.' in mLab. Please use your username and password here. <br/>In the end we bring the models/brainparts file into models/braindb.js.
      <pre><code>
     var mongoose = require('mongoose');
    
     var dbURI = 'mongodb://username:password@ds123456.mlab.com:23456/brainmlab'
     mongoose.connect(dbURI);
     
     require('./brainparts');
    </code></pre>
        Last we bring the braindb.js file into the application by requiring it in app.js after var bodyParser.  

      <pre><code>
     require('./models/braindb');
      </code></pre>    
     
    After starting the application with nodemon, you will see that there is a new collection called 'brainparts' in mLab. Click on the name and create a new document (Add document) by adding this code between the given curly brackets. Save it at 'Create and go back' and you have your first document in the database. Congratulations! <br/> Feel free to add more documents to your database.
    <!--  <pre><code>
      db.brainparts.save({
      name: "Cerebrum",
      meaning: "brain" 
      })
      </code></pre>
    
      <pre><code>
      db.brainparts.update({
      name: 'Cerebrum'
      }, {
      $push: {
        functionalities: {
            $each: [{
                functionality: 'Reasoning'
            },
               {
               functionality: 'Recognition'
               },
               {
               functionality: 'Visual Processing'
               },
               {
               functionality: 'Speech'
               }
            ]}
         }
      })
    </code></pre>-->
          
      <pre><code>
      "name": "Cerebrum",
      "meaning": "brain",
      "functionalities": [
          {
              "functionality": "Reasoning"
          },
          {
              "functionality": "Recognition"
          },
          {
              "functionality": "Visual Processing"
          },
          {
              "functionality": "Speech"
          }
        ]
     </code></pre>   
          
    <!--In models/braindb.js comment out var dbURI = 'mongodb://localhost:27017/Brain'; To connect using a driver via the standard MongoDB URI.
   
    <pre><code>
   var dbURI = 'mongodb://username:password@ds143451.mlab.com:43451/brainmlab'
   </code></pre>-->
    At this point we finish step 4 and you can get the code by checking out step4. 
    <pre><code>
    $ git checkout -f step4
    </code></pre>
          
    
 </div>
      <div id="S5" class='steps'>
     <h3 class="num"> 5. Reading documents in Postman. </h3> We have a MongoDB database set up, but we can't interact with it yet. Here we build a REST API so we can reach the database and we cant test the HTTP GET call in Postman which is an API development environment for Chrome. You can download Postman or launch it as an extension. <br/>
      Let's create a new file called brainApi.js in controllers folder in order to make some API calls. First we need Mongoose and the model. Next comes the function definition for reading all the documents with some error handlings.  



         <pre><code>
      var mongoose = require('mongoose');
      var Brain = mongoose.model('Brainpart');

      module.exports.allParts = function(req, res){
        Brain.find({}, function(err, docs){
        if (!err){
           res.status(200);
           res.json(docs); 
          } else {throw err;}
        });
      }
      </code></pre>  
        In folder routes we create a file called indexApi.js where the route is defined to allParts. Express is required in this file, and we load the brainApi controller. With a help of a router we have the Request URL path to our list.  
          
      <pre><code>
      var express = require('express');
      var router = express.Router();
      var brainparts = require('../controllers/brainApi');

      router.get('/brainparts', brainparts.allParts);

      module.exports = router;
      </code></pre>
          Before we can test our REST API call, let's put the following line which requires the API routes after
          "var index = require('./routes/index');" in app.js.

      <pre><code>
      var indexApi = require('./routes/indexApi');
      </code></pre>    
          Also after "app.use('/', index);" in app.js we put:

      <pre><code>
      app.use('/api', indexApi);
      </code></pre>
     It's time to test this GET call in Postman. So open it and where is says: 'Enter request URL' paste http://localhost:3000/api/brainparts/, and choose method GET and push the Send button. You will see a list of documents with brain parts.   <br/><br/>  
          
          
    In controllers/brainApi.js we put our function definition for getting only one brain part at a time. You can see some error handlings here too.

     <pre><code>
      module.exports.showPart = function(req, res){
       if (req.params && req.params.brainpartid){
         Brain.findById(req.params.brainpartid)
              .exec(function(err, part){
           if (!part){
              res.status(404);
              res.json("id not found");
              return;
           } else if(err){
              res.status(404);
              res.json(err);
              return;
           }
         res.status(200);
         res.json(part);
       });
       } else {
         res.status(404);
         res.json("no id in request");
       }
      }
      </code></pre>
          
      In routes/indexApi.js we have the URL path to get one item. 
      <pre><code>
      router.get('/brainparts/:brainpartid', brainparts.showPart);
      </code></pre>
          Now let's test this function: After getting the whole list with allParts (previous step) we can choose in item ID ("_id":) and copy it. So for example this path works for me. You might have different Ids. 
          Put http://localhost:3000/api/brainparts/5b5542e4e7179a0da546644c and choose method GET. 
          <br><br> Step 5 is finished: 
          <pre><code>
    $ git checkout -f step5
    </code></pre>
      </div>
      
      <div id="S6" class='steps'>
     <h3 class="num"> 6. Seeing documents in the Browswer. </h3>
   In the last section we could see in Postman what is it inside the Mongo database. Now we will be able to read the documents from the database in the browser. 
   First let's install request module so the Express application can call the API URLs. 
      <pre><code>
    $ npm install --save request
      </code></pre>
          After that we include request and the default server URL for local development is set in controllers/brain.js 
        <pre><code>
    var request = require('request');
    var apiOps = {
    server : "http://localhost:3000"
    };
     </code></pre>
  
        Now comment out getParts function  and replace it with the following code:
       <pre><code>
    module.exports.getParts = function(req, res){
      var requestOps, path;
      path = '/api/brainparts';
      requestOps = {
        url: apiOps.server + path,
        method:"GET",
        json: {},
        qs: {}
      };
      request(requestOps, function(err, response, body){
        var msg;
        if (!(body instanceof Array)){
          msg = "api lookup error";
          body = [];
        } else {
          if(!body.length){
            msg = "no part found";
          }
        }//else
        //rendering
        res.render('index', {
          title : 'Parts of the Human Brain',
            parts: body,
            message: msg
          });
        })
    }

      </code></pre>
      In the requestOps has the options: url has full URL of the request, method can be: GET, POST, PUT, or DELETE, json is the body of the request,
      here it is empty, and finally qs represents any query string parameters, also empty. Then we call request() with the options and a callback function.
      The call back function runs when the response comes back from the API, and has the parameters: an error object, the full response, and the parsed body of the response. (explanation from the book Getting MEAN by Simon Holmes) <br><br>
    Route didn't change in routes/index.js for this function. Let's test our application in the browser: Go to http://localhost:3000/ and see the list which should come from the database now.
    <br><br> So far we can read the whole list. But we would like to get the information from the database for one item by clicking on one brain part. So comment out getPart function and replace it with this:
      
     <pre><code>
    module.exports.getPart = function(req,res){
      var requestOps, path;
      path = "/api/brainparts/" + req.params.brainpartid;
    
      requestOps = {
        url: apiOps.server + path,
        method: "GET",
        json: {}
      };
      request(requestOps, 
        function(err, response, body){
          if (response.statusCode === 200){
            res.render('part', {
              title: 'Part info',
              part: body,
              part: {
                name: body.name,
                meaning: body.meaning,
                functionalities: body.functionalities
              }
            
            });
          } else  {
            if (response.statusCode === 404){
              title = "404, page not found";
            } else {
              title = response.statusCode + ", sorry";
            }
                
            res.status(response.statusCode);
            res.render('error', {
              title: title,
              message: "Try with different id, page not found",
              error: {
                status: response.statusCode,
                stack: 'go back to brain part list'
              }
            });   
          }//else
        });//function
    }

      </code></pre>
      Here again we have options, which goes into request(). In the callback function if the response is succesful (statusCode === 200) the data is read from the response body,
      otherwise we see error messages. <br><br> 
          In routes/index.js the route to getPart() is not correct now, because we need to give the ID of the part we would like to see. So let's change that:
          <pre><code>
    router.get('/part/:brainpartid', brainController.getPart);
      </code></pre>
      Also in views/index.ejs the links needs the ID. Replace the given list with this: 
      <pre><code>
    &lt;ul&gt;
    &lt;% parts.forEach(function(part){ %&gt;
    &lt;li&gt; &lt;a href='/part/&lt;%= part._id %&gt;'&gt;&lt;%= part.name %&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;% }); %&gt;
    &lt;/ul&gt;
      </code></pre>
          Finally in views/part.ejs the list has to be replaced with the following code in order to get the functionality list.
          <pre><code>
    &lt;ul&gt;  
      &lt;% part.functionalities.forEach(function(functionality){ %&gt;
        &lt;li&gt;
          &lt;span&gt;&lt;%= functionality.functionality %&gt;&lt;/span&gt;
        &lt;/li&gt;
      &lt;% }); %&gt;
    &lt;/ul&gt;
      </code></pre>
      Step 6 is finished and you can get the code: 
      <pre><code>
    git checkout -f step6
      </code></pre>
      </div>
      
      <div id="S7" class='steps'>
     <h3 class="num"> 7. Creating documents. </h3>
     In the first part of this section we learn how to create a brain part in Postman. This new item will be stored in Mongo database. 
     You can see it later in mLab or on your local database on your computer. First let's define an API function in controllers/brainApi.js to be able to create new items. 
     <pre><code>
    module.exports.createPart = function(req, res){
      Brain.create({
        name: req.body.name,
        meaning: req.body.meaning,
        functionalities: req.body.functionalities
      }, function(err, part){
        if(err){
          res.status(400);
          res.json(err);
        } else {
          res.status(201);
          res.json(part);
        }
      });
    }

      </code></pre>
     The name, meaning and the funcionality list is set by using the request body information respectively. 
     If creation is succesful (status is 201), the respond is set by using the given information (parsing a JSON format). <br><br>
     We also need a route definition in routes/indexApi.js:
      <pre><code>
    router.post('/brainparts', brainparts.createPart);
      </code></pre>
      Now we can test the createPart function in Postman. The URL is http://localhost:3000/api/brainparts/ and choose method POST this time. 
      Before pushing the Save button, a new brain part data has to be defined in JSON format. In Postman choose Body, raw and JSON(application/json).
      If you can't find this push the + button (new item) and set URL and the method and the data described just before. Copy the following definition 
      in the textarea in Postman. Now send the request. And we have a new part in our database.   
      <pre><code>
    {"name" : "Thalamus", "meaning": "inner room", "functionalities": [{"functionality":"sensory switch center"}, {"functionality": "relay station"}]}
     </code></pre>
          
     In the second part we will create a new item in the browser and use our API createPart function to save the new item in the database. We will need a form first and a route has to be determined with a GET request. In routes/index.js copy:
     <pre><code>
    router.get('/createpart', brainController.formCreatePart);
      </code></pre>
      The corresponding formCreatePart function in controllers/brain.js is given as:
          <pre><code>
    module.exports.formCreatePart = function(req, res){
      res.render('createpart', {
        title: 'Create Brain Part',
        error: req.query.err
      });
    }
      </code></pre>
     We need to create a file named createpart.ejs, but before that let's add a link in views/index.ejs to this file. 
    <pre><code>
    &lt;a class="change" href='/createpart'&gt; New Brain Part &lt;/a&gt;
      </code></pre>
  Some css changes in public/stylesheets/style.css:
          <pre><code>
    .change{
      font-size: 150%;
      color: white;
      background: red;
      padding:5px;
      border-radius: 48%;
    }
    a {
      text-decoration: none;
    }  
      </code></pre>
          Now we can populate our createpart.ejs file in the views folder.
     <pre><code>
    &lt;!DOCTYPE html&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
        &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;
        &lt;link rel='stylesheet' href='/stylesheets/style.css'/&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;h1&gt; Create a Brain Part &lt;/h1&gt;
        &lt;form class="form-horizontal" action="" method="post" role="form"&gt;
          &lt;p&gt; Name is requiered. Separate functionalities with commas.&lt;/p&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;td&gt;Name&lt;/td&gt;
              &lt;td&gt;&lt;input type="text" name="formname"&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Meaning&lt;/td&gt;
              &lt;td&gt;&lt;input type="text" name="formmeaning"&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Funcionalities&lt;/td&gt;
              &lt;td&gt;&lt;input type="text" name="formfunc"&gt;&lt;/td&gt;
            &lt;/tr&gt;      
            &lt;tr&gt;
              &lt;td colspan="2"&gt;&lt;input type="submit" value="Save"&gt;&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
        &lt;/form&gt;
      &lt;/body&gt;
    &lt;/html&gt;

      </code></pre>
     At this point you should be able to see a form and you can fill it out, but we still can't send the data. Let's fix it. 
          In routes/index.js the route has to be determined with a POST request.
          <pre><code>
    router.post('/createpart', brainController.createPart);
      </code></pre>
      Finally we create the createPart function. By using a dictionary (key value pairs) the functionality list is parsed from the input.
          Postdata gets the remaining data from the request body with the names (formname...) given in the input fields. If the creation is succesful, the application will be redirected to '/'. If the name field left empty the form is shown again. You can see a few other error handlings here too.  
      <pre><code>
    module.exports.createPart = function(req, res){
      var requestOps, path, postdata;
      path = '/api/brainparts';
      var funclist = req.body.formfunc.split(",");
      var funcdict = [];
      if (funclist[0] !== ""){
        var l = funclist.length;
        var i;
        for (i = 0; i &lt;l; i++){
          funcdict.push({ "functionality": funclist[i] });
        }
      }
      postdata = {
        name: req.body.formname,    
        meaning: req.body.formmeaning,
        functionalities: funcdict
      };
      if (postdata.meaning === ""){
        postdata.meaning = "??";
      }
      requestOps = {
        url : apiOps.server + path,
        method : "POST",
        json : postdata
      };
      if (!postdata.name) {
        res.redirect('/createpart/');
      } else {
        request(
          requestOps, function(err, response, body) {
            if (response.statusCode === 201) {
              res.redirect('/');
            } else if (response.statusCode === 400 && body.name && body.name === "ValidationError" ) {
              res.redirect('/createpart/');
            } else {
              res.status(response.statusCode);
              res.render('error', {
                message: "The name must be unique!",
                error: {
                  status: response.statusCode,
                  stack: 'go back to the form'
                }
              });
            }
          }
        );
      }     
   }

      </code></pre>
          We are done with this step. You can check it out now. 
      <pre><code>
      git checkout -f step7
      </code></pre>
     </div>
      
       <div id="S8" class='steps'>
     <h3 class="num"> 8. Deleting documents. </h3> In the first part of this section we learn how to delete a brain part in Postman. This new item will be deleted from Mongo database. In routes/indexApi.js we define the route to delete the item. Notice we need the ID.
        <pre><code>
      router.delete('/brainparts/:brainpartid', brainparts.deletePart);
      </code></pre>
           The deletePart function in controllers/brainApi.js looks like:
           <pre><code>
      module.exports.deletePart = function(req, res){
        var partid = req.params.brainpartid;
        if (partid){
          Brain.findByIdAndRemove(partid)
            .exec(
              function(err, part){
                if(err){
                  res.status(404);
                  res.json(err);
                  return;
                }
                res.status(204);
                res.json(null);
            });
        } else {
          res.status(404);
          res.json({"message":"no id"});
        } 
      } 
      </code></pre>
           To test the API delete function, create an item in the browser by filling out the form from step 7.
           Delete this item in Postman: first get the list by sending a GET request, then find the ID of the item.
           Lastly send a DELETE request in Postman with the URL: (no data in JSON) http://localhost:3000/api/brainparts/id 
           <br><br>
        In the second part we will delete an item in the browser and use our API deletePart function to delete the item from the database.
           In order to delete the item, we need to send a GET request:  
        <pre><code>
      router.get('/deletepart/:brainpartid', brainController.deletePart);
      </code></pre>
        The corresponding delete function is defined this way:
           <pre><code>
      module.exports.deletePart = function(req, res){
        var requestOps, path;
        path = "/api/brainparts/" + req.params.brainpartid;
          requestOps = {
            url: apiOps.server + path,
            method: "DELETE",
            json: {}
          };
          request(requestOps, 
            function(err, response, body){
              if (response.statusCode === 204){
                 res.redirect('/');
              } else  {
                 if (response.statusCode === 404){
                   title = "404, page not found";
                 } else {
                   title = response.statusCode + ", sorry";
                 }
                res.status(response.statusCode);
                res.render('error', {
                  title: title,
                  message: "Try with different id, page not found",
                  error: {
                    status: response.statusCode,
                    stack: 'go back to movie list'
                  }
                });    
              }//else
            }
          );
      } 

      </code></pre>
      In a previous step accidentaly I defined 'part' twice in controllers/brain.js. The first definition is overwritten by the second. Now let's change the first one 'part: body,' to 'brainpart: body,'. 
           <pre><code>
      brainpart: body,
      </code></pre>
           The change was necessary in order to get the body ID, in that case 'brainpart._id' has the body ID. In views/part.ejs we add a delete button as a link after the functionality list. 
      <pre><code>
      &lt;br&gt;&lt;br&gt;
      &lt;a href='/deletepart/&lt;%= brainpart._id %&gt;' class="changepart"&gt; Delete this part. &lt;/a&gt;
      </code></pre>
           Polishing the delete button gives the class definition in public/stylesheets/style.css
      <pre><code>
      .changepart{
        font-size: 140%;
        color: white;
        background: forestgreen;
        padding: 10px;
        margin: 10px;
        border-radius: 50%;
      }
      </code></pre>
           Step 8 is finished, you can get the code now:
        <pre><code>
      git checkout -f step8
      </code></pre>
      </div>   
      
      <div id="S9" class='steps'>
     <h3 class="num"> 9. Updating single subdocuments. </h3>In the first part of this section we learn how to update the meaning of a  brain part in Postman. The updated meaning will be stored in Mongo database. The route definition in routes/indexApi.js is defined with the method PUT. 
          
        <pre><code>
      router.put('/brainparts/:brainpartid', brainparts.updateMeaning);
      </code></pre>
           The API function updateMeaning  is in controllers/brainApi.js.  
          <pre><code>
      module.exports.updateMeaning = function(req, res){
        if(!req.params.brainpartid){
          res.status(404);
          res.json({"message": "id not found, it is required"});    
          return;
        }
        Brain.findById(req.params.brainpartid)
        .select('-name')
        .exec(
          function(err, part){
            if(!part){
              res.status(404);
              res.json({"message":"brain part is not found"});
              return;
            } else if (err) {
              res.status(400);
              res.json(err);
              return;
            }
            if (req.body.meaning)  part.meaning = req.body.meaning;
            part.save(function(err, part){
              if (err){
                res.status(404);
                res.json(err);
              } else {
                res.status(200);
                res.json(part);
              }   
            });
        });
      }

      </code></pre>
          Now we can test the updateMeaning function in Postman to set or update a meaning. The URL is http://localhost:3000/api/brainparts/id and choose method PUT. Before pushing the Save button, a new meaning has to be given in JSON format. In Postman choose Body, raw and JSON(application/json). Copy the following definition in the textarea in Postman. Now send the request. And we have the updated meaning in our database.
          <pre><code>
      {"meaning":"thinking"}
      </code></pre>
          In the second part we will update the meaning in the browser and use our API updateMeaning function to save the updated meaning in the database. We will need a form first and a route has to be determined with a GET request. In routes/index.js copy:
          <pre><code>
      router.get('/updatemeaning/:brainpartid', brainController.formUpdateMeaning);
      </code></pre>
          The corresponding formUpdateMeaning function in controllers/brain.js is shown as:
          <pre><code>
      module.exports.formUpdateMeaning = function(req, res){
        var requestOps, path;
        path = "/api/brainparts/" + req.params.brainpartid;
        requestOps = {
          url: apiOps.server + path,
          method: "GET",
          json: {}
        };
        request(requestOps, 
          function(err, response, body){
            res.render('updatemeaning', {
            title: 'Update Meaning',
            error: req.query.err,
            brainpart: body,
            part:{
              name: body.name,
              meaning: body.meaning
            }
          });
        });
      };
  </code></pre>
          We need to create a file named updatemeaning.ejs in the views folder. 
          <pre><code>
      &lt;!DOCTYPE html&gt;
      &lt;html&gt;
        &lt;head&gt;
          &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
          &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;
          &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;h1&gt; Update meaning for &lt;%= part.name %&gt;&lt;/h1&gt; 
          &lt;form class="form-horizontal" action="" method="post" role="form"&gt;
            &lt;p&gt; Field is requiered! &lt;/p&gt;
            &lt;table&gt;
            &lt;tr&gt;
            &lt;td&gt;Meaning&lt;/td&gt;
            &lt;td>&lt;input type="text" name="formmeaning"  value="&lt;%= part.meaning %&gt;"&gt;&lt;/td&gt;
            &lt;/tr>&gt;        
            &lt;tr&gt;
            &lt;td colspan="2"&gt;&lt;input type="submit" value="Save" &gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/table&gt;
          &lt;/form&gt;
        &lt;/body&gt;
      &lt;/html&gt;
 </code></pre>
          We also need to add a link in views/index.ejs. 
          <pre><code>
      &lt;a href='/updatemeaning/&lt;%= brainpart._id %&gt;' class="changepart"&gt; Update meaning. &lt;/a&gt;
      </code></pre>
          Now the updated meaning has to be sent with a POST request. In routes/index.js put the route method: 
          <pre><code>
      router.post('/updatemeaning/:brainpartid', brainController.updateMeaning);
      </code></pre>
          Finally we create the updateMeaning function. If the update is succesful, the application will be redirected to '/part/id'. If the name field left empty the form is shown again.
           <pre><code>
      module.exports.updateMeaning = function(req, res){
        var requestOps, path, partid, postdata;
        partid = req.params.brainpartid;
        path = "/api/brainparts/" + req.params.brainpartid;
        postdata = {
          meaning: req.body.formmeaning
        };
        requestOps = {
          url : apiOps.server + path,
          method : "PUT",
          json : postdata
        };
        if (!postdata.meaning) {
          res.redirect('/updatemeaning/'+partid);
        }
        else {
          request( requestOps, function(err, response, body) {
            if (response.statusCode === 200) {
              res.redirect('/part/'+partid);
            } else if (response.statusCode === 400 && body.formmeaning && body.formmeaning === "ValidationError" ) {
              res.redirect('/updatemeaning/'+partid);
            } else {
              res.status(response.statusCode);
              res.render('error', {
                message: "field is empty",
                partid: partid,
                error: {
                  status: response.statusCode,
                  stack: 'go back to brainpart'
                }
              });
            }//else
          });
        } //else 
      }
</code></pre>
          Step 9 is finished.
          <pre><code>
      git checkout -f step9
          </code></pre>
      </div>
      
      <div id="S10" class='steps'>
     <h3 class="num"> 10. Updating list subdocuments. </h3>In the first part of this section we learn how to update the funtionalities of a brain part in Postman. The updated functionalities will be stored in Mongo database. The route definition in routes/indexApi.js is given with the method PUT.
          <pre><code>
      router.put('/brainparts/:brainpartid/functionalities', brainparts.updateFunctionalities);
      </code></pre>
          The API function updateFunctionalities is in controllers/brainApi.js.
          <pre><code>
      module.exports.updateFunctionalities = function(req, res){
        if(!req.params.brainpartid){
          res.status(404);
          res.json({"message": "id not found, it is required"});    
          return;
        }
        Brain.findById(req.params.brainpartid)
        .select('-name')
        .exec(
          function(err, part){
            if(!part){
              res.status(404);
              res.json({"message":"brain part is not found"});
              return;
            } else if (err) {
              res.status(400);
              res.json(err);
              return;
            }
            part.functionalities = [];
            part.functionalities = part.functionalities.concat(req.body.functionalities);
            part.save(function(err,  part){
              if (err){
                res.status(404);
                res.json(err);
              } else {
                res.status(200);
                res.json(part);
              }   
            });
          });
      }
      </code></pre>Now we can test the updateFuncionalities function in Postman to set or update a functionality list. The URL is http://localhost:3000/api/brainparts/id/functionalities and choose method PUT. Before pushing the Save button, a new functinality list has to be given in JSON format. In Postman choose Body, raw and JSON(application/json). Copy the following definition in the textarea in Postman. Now send the request. And we have the updated funcionality list in our database.
          <pre><code>
      {"functionalities": [ {"functionality":"Posture"}, {"functionalities":"Balance"}]}
      </code></pre>
          In the second part we will update the functionality list in the browser and use our API updateFunctionalities function to save the updated functionality list in the database. We define a form first and a route has to be determined with a GET request. In routes/index.js copy:
     <pre><code>
      router.get('/updatefunctionalities/:brainpartid', brainController.formUpdateFunctionalities);
           </code></pre>
          The formUpdateFunctionalities function in controllers/brain.js is given as:
          <pre><code>
      module.exports.formUpdateFunctionalities = function(req, res){
        var requestOps, path;
        path = "/api/brainparts/" + req.params.brainpartid;
        requestOps = {
          url: apiOps.server + path,
          method: "GET",
          json: {}
        };
        request(requestOps, 
          function(err, response, body){
            var funclist = "";
            var l = body.functionalities.length;
            var i;
            if (l &gt; 0){
              for (i = 0; i &lt; l-1; i++){
                funclist += body.functionalities[i].functionality + ', '
              }
              funclist += body.functionalities[l-1].functionality;
            }
            res.render('updatefunctionalities', {
              title: 'Update functionalities',
              error: req.query.err,
              brainpart: body,
              part:{
                name: body.name,
                meaning: body.meaning,
                functionalities: funclist
              }
            });
          });
      };

          </code></pre>
We need to create a file named updatefunctionalities.ejs in the views folder.
          <pre><code>
      &lt;!DOCTYPE html&gt;
      &lt;html&gt;
        &lt;head&gt;
          &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
          &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;
          &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;h1&gt; Replace Functionalities for &lt;%= part.name %&gt;&lt;/h1&gt; 
          &lt;form class="form-horizontal" action="" method="post" role="form"&gt;
            &lt;p&gt; Please separate functionalities with commas.  &lt;/p&gt;
            &lt;table&gt;
            &lt;tr&gt;
            &lt;td&gt;Functionality&lt;/td&gt;
            &lt;td&gt;
            &lt;input type="text" name="formfunc" value="&lt;%= part.functionalities %&gt;"&gt;
            &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td colspan="2"&gt;&lt;input type="submit" value="Save" &gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/table&gt;
          &lt;/form&gt;
        &lt;/body&gt;
      &lt;/html&gt;
          </code></pre>
          We also need to add a link in views/part.ejs.
        <pre><code>
      &lt;a href='/updatefunctionalities/&lt;%= brainpart._id %&gt;' class="changepart"&gt; Update functionalities &lt;/a&gt;
        </code></pre>
          Now the updated functionality list has to be sent with a POST request. In routes/index.js put the route method:
          <pre><code>
      router.post('/updatefunctionalities/:brainpartid', brainController.updateFunctionalities);
        </code></pre>
          Finally we create the updateFunctionalities function. If the update is succesful, the application will be redirected to '/part/id'. If the name field left empty the form is shown again.
          <pre><code>
      module.exports.updateFunctionalities = function(req, res){
        var requestOps, path, partid, postdata;
        partid = req.params.brainpartid;
        path = "/api/brainparts/" + req.params.brainpartid + "/functionalities";
        var funclist = req.body.formfunc.split(",");
        var funcdict = [];
        if(funclist[0]!== "") {
          var l = funclist.length;
          var i;
          for (i = 0; i &lt;l; i++){
            funcdict.push({
              "functionality": funclist[i]
            });
          }
        }
        postdata = {
          functionalities: funcdict
        };
        requestOps = {
          url : apiOps.server + path,
          method: "PUT",
          json : postdata
        };
        if (!postdata.functionalities) {
          res.redirect('/updatefunctionalities/'+partid);
        }
        else {
          request( requestOps, function(err, response, body) {
            if (response.statusCode === 200) {
              res.redirect('/part/'+partid);
            } else if (response.statusCode === 400 && body.formfunctionalities && body.formfunctionalities === "ValidationError" ) {
              res.redirect('/updatefunctionalities/' + partid);
            } else {
              res.status(response.statusCode);
              res.render('error', {
                message: "field is empty",
                partid: partid,
                error: {
                  status: response.statusCode,
                  stack: 'go back to brain part'
                }
              });
            }
          }
         );
        } //else 
      }
</code></pre>
          We are done with this step. You can check it out now.
   <pre><code>
      git checkout -f step10
    </code></pre>          
      </div>  
  </body>
</html>
