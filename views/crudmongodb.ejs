<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body class="crud">
      
      <div class="step0">
          
    <h2 class="tuttitle"><%= title %></h2>
          
      </div>
        <div class="step0">
      <ol>
        <li class="inside"><a href="#S1"> Starting a new project with Express </a> </li>
          <li class="inside"> <a href="#S2"> List of parts and one static part  </a></li>
          <li class="inside"> <a href="#S3"> Data in controller </a></li>
          <li class="inside"> <a href="#S4"> MongoDB and Schema </a></li>
          <li class="inside"> <a href="#S5"> Reading documents in API development environment </a></li>
          <li class="inside"> <a href="#S6"> Seeing documents in the browser </a></li>
      </ol>
      </div>
      
    <div id="S1" class='steps'>
        <h3 class="num"> 1. Starting a new project with Express </h3>
To start let's do a few initial steps. First we make a new directory 'brain' and go into this dirrectory. There we create a new express project and we are going to use ejs to template. We also need to install Node dependencies with npm. Within your project directory you can find a file called package.json which shows the dependencies. You can open the project in any editor you like.
       
           <pre><code>
        $ mkdir brain
        $ cd brain
        $ express --ejs
        $ npm install 
         </code></pre>
        
        Now we can start the project. In the project directory we use npm start or nodemon. Nodemon has the advantage that if the code has been changed, the application restarts automatically. You only have to refresh your browser. To install nodemon globally we have to use npm in terminal. After the first initial steps let's check the project in the browser: go to localhost:3000.
        
        <pre><code>
        $ npm install -g nodemon
        </code></pre>
        
        We are going to change the title from 'Express' to 'Parts of the Human Brain' in the routes/index.js file. After that we comment out the welcome line in views/index.ejs file. Now you can check your browser again. 
        
        <pre><code>
        res.render('index', { title: 'Parts of the Human Brain' });
        </code></pre>
        
        <pre><code>
        &lt;&#33;--&lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;--&gt;
        </code></pre>
        
        We have directories like routes and views, and now we create a new folder called controllers in brain folder.
        <pre><code>
        $ mkdir controllers
        </code></pre>
        In that new directory let's open a new file brain.js and define a function getParts in brain.js. We don't need the router.get function in router/index.js so we comment it out. Instead we define a new router.get function which uses the function getParts defined in brain.js. In order to use this function it should be imported, so we define a new variable called brainController after the definition of var router, which imports the whole content of the brain.js file.  
        <pre><code>
        module.exports.getParts = function(req, res){
          res.render('index', {title: 'Parts of the Human Brain'});
        };
        </code></pre>
        <pre><code>
        router.get('/', brainController.getParts);
        </code></pre>
        <pre><code>
        var brainController = require('../controllers/brain');
        </code></pre>
        
        Checking the browser, we don't see any change from last time. Finally we can save our project and subsequent verions of it in git repository. I don't go into details how to do that. One good tutorials is <a href="http://www.vogella.com/tutorials/Git/article.html" target="_blank" > here </a>. In this project we need to create a .gitignore file which contains the followings:
        
        <pre><code>
        # Dependency directory
        node_modules

        # Environment variables
        .env
        </code></pre>
        After cloning the repository you can checkout this part. 
        
        <pre><code>
   $ git clone https://github.com/bukkicsilla/brainparts.git;
   $ cd brainparts
   $ git checkout step1
   $ npm install
        </code></pre>
        </div>
      
     
      
    <div id="S2" class='steps'>
     <h3 class="num"> 2. List of parts and one static part </h3> In views/index.ejs first we creat our list with only 3 parts of the brain. Let's put this list after the line with the title. Later we can add more of the parts of the brain in form using mongodb database. 
           <pre><code>
        &lt;ul&gt;
           &lt;li&gt;Cerebrum&lt;/li&gt;
           &lt;li&gt;Cerebellum&lt;/li&gt;
           &lt;li&gt;Pons&lt;/li&gt;
        &lt;/ul&gt;
       </code></pre>
        
        Some styling is needed for better readability. In public/stylesheets/style.css we add: 
        
  <pre><code>
        li, p {
            font-size: 18px;
        }
        
</code></pre>
        Now we would like to see some of the details of one brain area. The first part is the Cerebrum in the list, so we use that and we need a new part.ejs page for that. But before that let's define a function getPart in controllers/brain.js. The 'part' means the part.ejs file we will create soon.
        
        <pre><code>
        module.exports.getPart = function(req, res){
           res.render('part', {title: 'Part of the brain.'});
        };
        </code></pre>

        To show the details, a route method has to be set up in routes/index.js, which uses the function getPart.
        <pre><code>
        router.get('/part', brainController.getPart);
        </code></pre>
        
        Now let's create the part.ejs file in views and populate it with the following code:
        <pre><code>
    &lt;!DOCTYPE html&gt;
      &lt;html&gt;
        &lt;head&gt;
          &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;
          &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;
          &lt;p&gt; Cerebrum &lt;/p&gt;
          &lt;p&gt; It means brain.&lt;/p&gt;
          &lt;p&gt; Functionality:&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Reasoning&lt;/li&gt;
            &lt;li&gt;Recognition&lt;/li&gt;
            &lt;li&gt;Visual processing&lt;/li&gt;
            &lt;li&gt;Speech&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/body&gt;
      &lt;/html&gt;
     </code></pre>
     
      To reach this page from the index page, we modify one line in views/index.ejs.  Instead of &lt;li&gt;Cerebrum&lt;/li&gt; we put:

      <pre><code>
        &lt;li&gt;&lt;a href="/part"&gt;Cerebrum&lt;/a&gt;&lt;/li&gt;
        </code></pre>
        
        Let's check our project in the browser again. You can get the code by cheching out step2. The f flag makes sure that any changes will be undone. 
        <pre><code>
    $ git checkout -f step2
        </code></pre>
      </div>
      
<div id="S3" class='steps'>
     <h3 class="num"> 3. Data in controller </h3> In this section we move the data to the controller file.  Replace the two existing functions in controllers/brain.js with the following code:
       
           <pre><code>
    module.exports.getParts = function(req, res){
      res.render('index', {
        title: 'Parts of the Human Brain',
        parts: [{
                name: 'Cerebrum'
                },
                {
                name: 'Cerebellum'
                },
                {
                name: 'Pons'
                }
               ]                   
            });
    };

        </code></pre>
        
      <pre><code>
    module.exports.getPart = function(req, res){
      res.render('part', {
        title: 'Part of the brain.',
        part: { 
              name: 'Cerebrum',
              meaning: 'brain',
              functionalities: [
                'Reasoning', 'Recognition', 
                'Visual Processing', 'Speech'
                ]
              }
         });
    };

      </code></pre>
    Now we don't need the data in the views anymore. First delete your list in views/index.ejs, and instead of it put a for loop which is used to iterate over the list using &lt;% code %&gt;. The variable value is passed from the controller to the view with &lt;%= value %&gt;.   
    
    <pre><code>
    &lt;ul&gt;
      &lt;% parts.forEach(function(part){ %&gt;
      &lt;li&gt; &lt;a href="/part"&gt;&lt;%= part.name %&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;% }); %&gt;
    &lt;/ul&gt;
     </code></pre>

    Next delete the two first paragraphs in views/part.ejs and instead of them put these lines.
    
    <pre><code>
    &lt;p&gt;&lt;%= part.name %&gt; &lt;/p&gt;
    &lt;p&gt; It means &lt;%= part.meaning%&gt;.&lt;/p&gt;
     </code></pre>
    
    Finally delete your list in views/part.ejs and replace it with this code:
    <pre><code>
    &lt;ul&gt;
     &lt;% for(var i=0; i&lt;part.functionalities.length; i++) {%&gt;
       &lt;li&gt;
         &lt;span&gt;&lt;%= part.functionalities[i] %&gt;&lt;/span&gt;
       &lt;/li&gt;
     &lt;% } %&gt;
    &lt;/ul&gt;
   </code></pre>
    
    After completing this section we are ready to check our project in the browser. You can get the code now by checking out step3:
    <pre><code>
    $ git checkout -f step3
    </code></pre>
      </div>
      
      <div id="S4" class='steps'>
     <h3 class="num"> 4. MongoDB and Schema </h3> First let's create a color id between the span tag in views/part.ejs and
          
    <pre><code>
    &lt;span id="color"&gt;&lt;%= part.functionalities[i] %&gt;&lt;/span&gt;
    </code></pre>
        we define the color in public/stylesheets/style.css. Add this code to the end of the file.
          <pre><code>
    #color {
           color: blueviolet;
           }
      </code></pre> 
      Now we set up our database by creating a new folder and by installing Moongose the bridge between MongoDB and Express. 
          So create a folder called 'models' in the root folder and type the following in the consol.
          <pre><code>
    $ npm install mongoose --save
      </code></pre>
    In the models folder let's create a new file brainparts.js. The first line gets the Mongoose which we need for the Moongose schema. 
    Next we define the schema 'partSchema' with a subdocument 'functionalitySchema'. Notice that the first requires the second. Last the model is compiled from the schema. 'Brainpart' is the name of the model and 'partSchema' is the schema to use. Because there is no MongoDB collection name given as an argument (it would be the third one), it will be automatically created from the model name as the lowercase pluralized version: 'brainparts'.  
    
    <pre><code>
     var mongoose = require('mongoose');
    
     var partSchema = new mongoose.Schema({
     name: { type: String, unique: true, required: true},
     meaning: {type: String},
     functionalities: [functionalitySchema]
     });
    
     var functionalitySchema = new mongoose.Schema({
     functionality: {type: String}
     });
    
     mongoose.model('Brainpart', partSchema);
    
   </code></pre>

      Now let's open a new file called braindb.js in the models folder. Moongose is reqiered here too. <br/> In this tutorial we will use the database in the cloud. Specifically we create our database in mLab. If you don't have an account, please sign up. Let's create a database called 'brainmlab' at MongoDb Deployments. (I chose Amazon and the free Sandbox and US East.) Now you should add a user at Users: Add database user. <br/> You should replace the dbURI with your own path to the database. You can find the path at: <br/> 'To connect using a driver via the standard MongoDB URI.' in mLab. Please use your username and password here. <br/>In the end we bring the models/brainparts file into models/braindb.js.
      <pre><code>
     var mongoose = require('mongoose');
    
     var dbURI = 'mongodb://username:password@ds123456.mlab.com:23456/brainmlab'
     mongoose.connect(dbURI);
     
     require('./brainparts');
    </code></pre>
        Last we bring the braindb.js file into the application by requiring it in app.js after var bodyParser.  

      <pre><code>
     require('./models/braindb');
      </code></pre>    
     
    After starting the application with nodemon, you will see that there is a new collection called 'brainparts' in mLab. Click on the name and create a new document (Add document) by adding this code between the given curly brackets. Save it at 'Create and go back' and you have your first document in the database. Congratulations! <br/> Feel free to add more documents to your database.
    <!--  <pre><code>
      db.brainparts.save({
      name: "Cerebrum",
      meaning: "brain" 
      })
      </code></pre>
    
      <pre><code>
      db.brainparts.update({
      name: 'Cerebrum'
      }, {
      $push: {
        functionalities: {
            $each: [{
                functionality: 'Reasoning'
            },
               {
               functionality: 'Recognition'
               },
               {
               functionality: 'Visual Processing'
               },
               {
               functionality: 'Speech'
               }
            ]}
         }
      })
    </code></pre>-->
          
      <pre><code>
      "name": "Cerebrum",
      "meaning": "brain",
      "functionalities": [
          {
              "functionality": "Reasoning"
          },
          {
              "functionality": "Recognition"
          },
          {
              "functionality": "Visual Processing"
          },
          {
              "functionality": "Speech"
          }
        ]
     </code></pre>   
          
    <!--In models/braindb.js comment out var dbURI = 'mongodb://localhost:27017/Brain'; To connect using a driver via the standard MongoDB URI.
   
    <pre><code>
   var dbURI = 'mongodb://username:password@ds143451.mlab.com:43451/brainmlab'
   </code></pre>-->
    At this point we finish step 4 and you can get the code by checking out step4. 
    <pre><code>
    $ git checkout -f step4
    </code></pre>
          
    
 </div>
      <div id="S5" class='steps'>
     <h3 class="num"> Reading documents in API development environment </h3> We have a MongoDB database set up, but we can't interact with it yet. Here we build a REST API so we can reach the database and we cant test the HTTP GET call in Postman which is an API development environment for Chrome. You can download Postman or launch it as an extension. <br/>
      Let's create a new file called brainApi.js in controllers folder in order to make some API calls. First we need Mongoose and the model. Next comes the function definition for reading all the documents with some error handlings.  



         <pre><code>
      var mongoose = require('mongoose');
      var Brain = mongoose.model('Brainpart');

      module.exports.allParts = function(req, res){
        Brain.find({}, function(err, docs){
        if (!err){
           res.status(200);
           res.json(docs); 
          } else {throw err;}
        });
      }
      </code></pre>  
        In folder routes we create a file called indexApi.js where the route is defined to allParts. Express is required in this file, and we load the brainApi controller. With a help of a router we have the Request URL path to our list.  
          
      <pre><code>
      var express = require('express');
      var router = express.Router();
      var brainparts = require('../controllers/brainApi');

      router.get('/brainparts', brainparts.allParts);

      module.exports = router;
      </code></pre>
          Before we can test our REST API call, let's put the following line which requires the API routes after
          "var index = require('./routes/index');" in app.js.

      <pre><code>
      var indexApi = require('./routes/indexApi');
      </code></pre>    
          Also after "app.use('/', index);" in app.js we put:

      <pre><code>
      app.use('/api', indexApi);
      </code></pre>
     It's time to test this GET call in Postman. So open it and where is says: 'Enter request URL' paste http://localhost:3000/api/brainparts/, and choose method GET and push the Send button. You will see a list of documents with brain parts.   <br/><br/>  
          
          
    In controllers/brainApi.js we put our function definition for getting only one brain part at a time. You can see some error handlings here too.

     <pre><code>
      module.exports.showPart = function(req, res){
       if (req.params && req.params.brainpartid){
         Brain.findById(req.params.brainpartid)
              .exec(function(err, part){
           if (!part){
              res.status(404);
              res.json("id not found");
              return;
           } else if(err){
              res.status(404);
              res.json(err);
              return;
           }
         res.status(200);
         res.json(part);
       });
       } else {
         res.status(404);
         res.json("no id in request");
       }
      }
      </code></pre>
          
      In routes/indexApi.js we have the URL path to get one item. 
      <pre><code>
      router.get('/brainparts/:brainpartid', brainparts.showPart);
      </code></pre>
          Now let's test this function: After getting the whole list with allParts (previous step) we can choose in item ID ("_id":) and copy it. So for example this path works for me. You might have different Ids. 
          Put http://localhost:3000/api/brainparts/5b5542e4e7179a0da546644c and choose method GET. 
          <br><br> Step 5 is finished: 
          <pre><code>
    $ git checkout -f step5
    </code></pre>
      </div>
      
      <div id="S6" class='steps'>
     <h3 class="num"> 6. Seeing documents in the browswer. </h3>
 
      <pre><code>
    $ npm install --save request
      </code></pre>
          In controllers/brain.js 
        <pre><code>
    var request = require('request');
    var apiOps = {
    server : "http://localhost:3000"
};
     </code></pre>
  
          Comment out getParts and replace it with the following code:
       <pre><code>
    module.exports.getParts = function(req, res){
      var requestOps, path;
      path = '/api/brainparts';
      requestOps = {
        url: apiOps.server + path,
        method:"GET",
        json: {},
        qs: {}
      };
      request(requestOps, function(err, response, body){
        var msg;
        if (!(body instanceof Array)){
          msg = "api lookup error";
          body = [];
        } else {
          if(!body.length){
            msg = "no part found";
          }
        }//else
        //rendering
        res.render('index', {
          title : 'Parts of the Human Brain',
            parts: body,
            message: msg
          });
        })
    }

      </code></pre>
    Route didn't change in routes/index.js for this function. Let's test our application in the browser: Go to http://localhost:3000/ and see the list which should come from the database now. 
     <pre><code>
    module.exports.getPart = function(req,res){
      var requestOps, path;
      path = "/api/brainparts/" + req.params.brainpartid;
    
      requestOps = {
        url: apiOps.server + path,
        method: "GET",
        json: {}
      };
      request(requestOps, 
        function(err, response, body){
          if (response.statusCode === 200){
            res.render('part', {
              title: 'Part info',
              part: body,
              part: {
                name: body.name,
                meaning: body.meaning,
                functionalities: body.functionalities
              }
            
            });
          } else  {
            if (response.statusCode === 404){
              title = "404, page not found";
            } else {
              title = response.statusCode + ", sorry";
            }
                
            res.status(response.statusCode);
            res.render('error', {
              title: title,
              message: "Try with different id, page not found",
              error: {
                status: response.statusCode,
                stack: 'go back to brain part list'
              }
            });   
          }//else
        });//function
    }

      </code></pre>
          In routes/index.js
          <pre><code>
    router.get('/part/:brainpartid', brainController.getPart);
      </code></pre>
          In views/part.ejs
          <pre><code>
    &lt;ul&gt;  
      &lt;% part.functionalities.forEach(function(functionality){ %&gt;
        &lt;li&gt;
          &lt;span&gt;&lt;%= functionality.functionality %&gt;&lt;/span&gt;
        &lt;/li&gt;
      &lt;% }); %&gt;
    &lt;/ul&gt;
      </code></pre>
      </div>
      <!--<div id="S5" class='steps'>
     <h3 class="num"> 5. </h3>
 
      <pre><code>
      </code></pre>

      </div>-->
      
  </body>
</html>
